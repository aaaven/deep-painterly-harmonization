# target, selfie, x, y

# resize the selfie to designed size (w, h) and the design should provide its location (x, y)

def generate_mask(selfie):
    # maskRCNN
    return selfie_mask

def padding_selfie_mask(selfie_mask, x, y, target):
    # padding the selfie mask (generated by generate_mask) to target image_size
    return c_mask

def dialate_c_mask(c_mask, strength):
    # dialate the c_mask
    return c_mask_dialated

def generate_native(selfie, c_mask, c_mask_dialated, target):
    return native

def preprocessing(target, selfie, x, y):
    # generate mask
    selfie_mask = generate_mask(selfie)
    # padding mask
    c_mask = padding_selfie_mask(selfie_mask, x, y, target)
    # dialate the c_mask
    c_mask_dialated = dialate_c_mask(c_mask)

    # generate native image
    native = generate_native(selfie, c_mask, c_mask_dialated, target) ???

    # generate the four inputs
    return c_mask, c_mask_dialated, native

def deep_harmony(c_mask, c_mask_dialated, native, target):
    return ??

def postprocessing(?):
    return ??


def generate_styled_image(selfie, target, x, y):
    c_mask, c_mask_dialated, native = preprocessing(target, selfie, x, y)
    # deep harmony take four inputs:
    # c_mask, c_mask_dialated, native AND target togenerate output
    # and generate
    ??? = deep_harmony(c_mask, c_mask_dialated, native, target)
    # postprocessing
    final_result = postprocessing(???)
    return final_result

final_result = generate_styled_image(selfie, target, x, y)
